// Generated by gencpp from file octo_arm_teleop/GUI_adra_statResponse.msg
// DO NOT EDIT!


#ifndef OCTO_ARM_TELEOP_MESSAGE_GUI_ADRA_STATRESPONSE_H
#define OCTO_ARM_TELEOP_MESSAGE_GUI_ADRA_STATRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace octo_arm_teleop
{
template <class ContainerAllocator>
struct GUI_adra_statResponse_
{
  typedef GUI_adra_statResponse_<ContainerAllocator> Type;

  GUI_adra_statResponse_()
    : temp_drivers()
    , temp_motors()
    , volt_motors()
    , error_motors()  {
      temp_drivers.assign(0.0);

      temp_motors.assign(0.0);

      volt_motors.assign(0.0);

      error_motors.assign(0);
  }
  GUI_adra_statResponse_(const ContainerAllocator& _alloc)
    : temp_drivers()
    , temp_motors()
    , volt_motors()
    , error_motors()  {
  (void)_alloc;
      temp_drivers.assign(0.0);

      temp_motors.assign(0.0);

      volt_motors.assign(0.0);

      error_motors.assign(0);
  }



   typedef boost::array<float, 4>  _temp_drivers_type;
  _temp_drivers_type temp_drivers;

   typedef boost::array<float, 4>  _temp_motors_type;
  _temp_motors_type temp_motors;

   typedef boost::array<float, 4>  _volt_motors_type;
  _volt_motors_type volt_motors;

   typedef boost::array<int16_t, 4>  _error_motors_type;
  _error_motors_type error_motors;





  typedef boost::shared_ptr< ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GUI_adra_statResponse_

typedef ::octo_arm_teleop::GUI_adra_statResponse_<std::allocator<void> > GUI_adra_statResponse;

typedef boost::shared_ptr< ::octo_arm_teleop::GUI_adra_statResponse > GUI_adra_statResponsePtr;
typedef boost::shared_ptr< ::octo_arm_teleop::GUI_adra_statResponse const> GUI_adra_statResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator1> & lhs, const ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator2> & rhs)
{
  return lhs.temp_drivers == rhs.temp_drivers &&
    lhs.temp_motors == rhs.temp_motors &&
    lhs.volt_motors == rhs.volt_motors &&
    lhs.error_motors == rhs.error_motors;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator1> & lhs, const ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace octo_arm_teleop

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a00977049f6f555b54e6778e7a853495";
  }

  static const char* value(const ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa00977049f6f555bULL;
  static const uint64_t static_value2 = 0x54e6778e7a853495ULL;
};

template<class ContainerAllocator>
struct DataType< ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "octo_arm_teleop/GUI_adra_statResponse";
  }

  static const char* value(const ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[4] temp_drivers\n"
"float32[4] temp_motors\n"
"float32[4] volt_motors\n"
"int16[4] error_motors\n"
"\n"
;
  }

  static const char* value(const ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.temp_drivers);
      stream.next(m.temp_motors);
      stream.next(m.volt_motors);
      stream.next(m.error_motors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GUI_adra_statResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::octo_arm_teleop::GUI_adra_statResponse_<ContainerAllocator>& v)
  {
    s << indent << "temp_drivers[]" << std::endl;
    for (size_t i = 0; i < v.temp_drivers.size(); ++i)
    {
      s << indent << "  temp_drivers[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.temp_drivers[i]);
    }
    s << indent << "temp_motors[]" << std::endl;
    for (size_t i = 0; i < v.temp_motors.size(); ++i)
    {
      s << indent << "  temp_motors[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.temp_motors[i]);
    }
    s << indent << "volt_motors[]" << std::endl;
    for (size_t i = 0; i < v.volt_motors.size(); ++i)
    {
      s << indent << "  volt_motors[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.volt_motors[i]);
    }
    s << indent << "error_motors[]" << std::endl;
    for (size_t i = 0; i < v.error_motors.size(); ++i)
    {
      s << indent << "  error_motors[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.error_motors[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OCTO_ARM_TELEOP_MESSAGE_GUI_ADRA_STATRESPONSE_H
