// Generated by gencpp from file octo_qt/arm_tool.msg
// DO NOT EDIT!


#ifndef OCTO_QT_MESSAGE_ARM_TOOL_H
#define OCTO_QT_MESSAGE_ARM_TOOL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace octo_qt
{
template <class ContainerAllocator>
struct arm_tool_
{
  typedef arm_tool_<ContainerAllocator> Type;

  arm_tool_()
    : data(0)  {
    }
  arm_tool_(const ContainerAllocator& _alloc)
    : data(0)  {
  (void)_alloc;
    }



   typedef int8_t _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::octo_qt::arm_tool_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::octo_qt::arm_tool_<ContainerAllocator> const> ConstPtr;

}; // struct arm_tool_

typedef ::octo_qt::arm_tool_<std::allocator<void> > arm_tool;

typedef boost::shared_ptr< ::octo_qt::arm_tool > arm_toolPtr;
typedef boost::shared_ptr< ::octo_qt::arm_tool const> arm_toolConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::octo_qt::arm_tool_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::octo_qt::arm_tool_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::octo_qt::arm_tool_<ContainerAllocator1> & lhs, const ::octo_qt::arm_tool_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::octo_qt::arm_tool_<ContainerAllocator1> & lhs, const ::octo_qt::arm_tool_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace octo_qt

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::octo_qt::arm_tool_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::octo_qt::arm_tool_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::octo_qt::arm_tool_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::octo_qt::arm_tool_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::octo_qt::arm_tool_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::octo_qt::arm_tool_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::octo_qt::arm_tool_<ContainerAllocator> >
{
  static const char* value()
  {
    return "27ffa0c9c4b8fb8492252bcad9e5c57b";
  }

  static const char* value(const ::octo_qt::arm_tool_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x27ffa0c9c4b8fb84ULL;
  static const uint64_t static_value2 = 0x92252bcad9e5c57bULL;
};

template<class ContainerAllocator>
struct DataType< ::octo_qt::arm_tool_<ContainerAllocator> >
{
  static const char* value()
  {
    return "octo_qt/arm_tool";
  }

  static const char* value(const ::octo_qt::arm_tool_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::octo_qt::arm_tool_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 data\n"
;
  }

  static const char* value(const ::octo_qt::arm_tool_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::octo_qt::arm_tool_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arm_tool_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::octo_qt::arm_tool_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::octo_qt::arm_tool_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    Printer<int8_t>::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OCTO_QT_MESSAGE_ARM_TOOL_H
