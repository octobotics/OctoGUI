// Generated by gencpp from file serialtoros/graph_arr.msg
// DO NOT EDIT!


#ifndef SERIALTOROS_MESSAGE_GRAPH_ARR_H
#define SERIALTOROS_MESSAGE_GRAPH_ARR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serialtoros
{
template <class ContainerAllocator>
struct graph_arr_
{
  typedef graph_arr_<ContainerAllocator> Type;

  graph_arr_()
    : data()  {
      data.assign(0);
  }
  graph_arr_(const ContainerAllocator& _alloc)
    : data()  {
  (void)_alloc;
      data.assign(0);
  }



   typedef boost::array<int64_t, 320>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::serialtoros::graph_arr_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serialtoros::graph_arr_<ContainerAllocator> const> ConstPtr;

}; // struct graph_arr_

typedef ::serialtoros::graph_arr_<std::allocator<void> > graph_arr;

typedef boost::shared_ptr< ::serialtoros::graph_arr > graph_arrPtr;
typedef boost::shared_ptr< ::serialtoros::graph_arr const> graph_arrConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serialtoros::graph_arr_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serialtoros::graph_arr_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serialtoros::graph_arr_<ContainerAllocator1> & lhs, const ::serialtoros::graph_arr_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serialtoros::graph_arr_<ContainerAllocator1> & lhs, const ::serialtoros::graph_arr_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serialtoros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serialtoros::graph_arr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serialtoros::graph_arr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serialtoros::graph_arr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serialtoros::graph_arr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serialtoros::graph_arr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serialtoros::graph_arr_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serialtoros::graph_arr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6296f4fa134cef085ed104bdfb1130bd";
  }

  static const char* value(const ::serialtoros::graph_arr_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6296f4fa134cef08ULL;
  static const uint64_t static_value2 = 0x5ed104bdfb1130bdULL;
};

template<class ContainerAllocator>
struct DataType< ::serialtoros::graph_arr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serialtoros/graph_arr";
  }

  static const char* value(const ::serialtoros::graph_arr_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serialtoros::graph_arr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64[320] data\n"
;
  }

  static const char* value(const ::serialtoros::graph_arr_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serialtoros::graph_arr_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct graph_arr_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serialtoros::graph_arr_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serialtoros::graph_arr_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIALTOROS_MESSAGE_GRAPH_ARR_H
